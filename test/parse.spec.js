import test from 'ava';

import parse from '../lib/fn/parse';

test('(str: string)', t => {
	t.is(parse(), undefined);
	t.is(parse('undefined'), undefined);
	t.is(parse('null'), null);
	t.is(parse('true'), true);
	t.is(parse('false'), false);
	t.is(parse('UNDEFINED'), 'UNDEFINED');
	t.is(parse('NULL'), 'NULL');
	t.is(parse('TRUE'), 'TRUE');
	t.is(parse('FALSE'), 'FALSE');
	t.is(parse(''), '');
	t.is(parse(' '), ' ');
	t.is(parse('a'), 'a');
	t.is(parse('0'), 0);
	t.is(parse('1'), 1);
	t.is(parse('-1'), -1);
	t.is(parse('  -  1'), -1);
	t.is(parse('  -  -  1'), 1);
	t.is(parse('Infinity'), Infinity);
	t.is(parse('-Infinity'), -Infinity);
	t.is(parse('  -  Infinity'), -Infinity);
	t.is(parse('1 + 1'), 2);
	t.is(parse('2 * 2'), 4);
	t.is(parse('3 ** 3'), 27);
	t.is(parse('0xFF'), 255);
	t.is(parse('0 x FF'), '0 x FF');
	t.is(parse('Math.PI'), 'Math.PI');
	t.is(parse('"a"'), '"a"');
	t.is(parse("'a'"), "'a'");
	t.is(parse("`a`"), '`a`');
	t.is(parse('+"1"'), 1);
	t.is(parse("1 + `${2 + 2}`"), '14');
	t.is(parse('+'), '+');
	t.is(parse('-'), '-');
	t.is(parse('*'), '*');
	t.is(parse('/'), '/');
	t.is(parse('a=0&amp;b=1&c=2', false), 'a=0&amp;b=1&c=2');
	t.deepEqual(parse('[]'), []);
	t.deepEqual(parse('[1, 2, "3"]'), [1, 2, '3']);
	t.deepEqual(parse('[1, 2, `${1 + 2}`]'), [1, 2, '3']);
	t.deepEqual(parse('{}'), {});
	t.deepEqual(parse('{"a": 0, "b": 1}'), {a: 0, b: 1});
	t.deepEqual(parse('{a: 0, b: 1}'), '{a: 0, b: 1}');
	t.deepEqual(parse('parseInt("1")'), 'parseInt("1")');
	t.deepEqual(parse('parseInt'), 'parseInt');
	t.deepEqual(parse('{parseInt}'), '{parseInt}');
	t.deepEqual(parse('{"a": parseInt}'), '{"a": parseInt}');
	t.deepEqual(parse('a=0&b=1'), 'a=0&b=1');
});
